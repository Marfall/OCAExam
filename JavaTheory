ПРИМИТИВНЫЕ ТИПЫ ДАННЫХ. ПЕРЕМЕННЫЕ:


        - Тип данных:

                - Множество допустимых значений этих данных, а также совокупность операций над ними.


        - Перменная:

                - Именнованная область памяти, адрес которой можно использовать для осуществления доступа к данным 
                  и манипуляций над ними в ходе выполнения программы.


        => Когда вы назначаете переменной какое-либо значение, это значение хранится в области памяти и с помощью имени переменной
           можно обратиться к памяти за значением.


        Составные части переменной:

            - Тип   
            - Имя
            - Размер
            - Значение

        
        Типы данных в Java:

            - Простые (primitive)
            - Ссылочные (reference)


        В Java 8 примитивных типов данных:

            - Численные (numeric):
                - целые (integers)           - byte, short, int , long
                - дробные (floating point)   - float, double

            - Символьные (character)
            - Логические (boolean)

            int - целочиленный тип данных в Java по умолчанию

            double - вещественный тип данных в Java по умолчанию

            
            - Для оперерирования типом данных long, нужно использовать L :

              long var = 1000000000000000L;

              - Аналогично - float:

              float var = 2.5f;


              - Проблем с float x = 20;  не будет, поскольку int находится внутри float


            char - символьный, занимает 2 байта, имеет диапазон  0 - 65536
            
            Способы задания char:
                
                char c1 = 'a';

                char c2 = 500;   - задание 500-го символа юникода - стандарта кодирования символов, содержащего знаки почти всех
                                   письменых языков.

                char c3 = '\u1234'  - порядковый номер символа в юникоде   '\u0500'  - шестнадцатириная система


            boolean - размер строго не определен, принимает значения true/false




СИСТЕМЫ СЧИСЛЕНИЙ:


         int e = 60;
         int e1 = 0b111100;         - двоичная       
         int e2 = 074;              - компилятор поймет что 8-ричная
         int e3 = 0x3C              - шестнадцатириная

         int a7 = 1_000_000;        - удобное оформление чисмл с множеством цифр



        Нельзя использовать underscore:

            - В начале и в конце числа

            - До и после точки в дробных числах

            - До и после букв L, l, F, f, D, d 

            - До, после и между 0X, 0x, 0B, 0b

            Исключение: underscore можно использовать после 0, который указывает, что число в двоичном формате: 0_74




АРИФМЕТИЧЕСКИЕ И ЛОГИЧЕСКИЕ ОПЕРАЦИИ. ОПЕРАЦИИ СРАВНЕНИЯ И ПРИСВАИВАНИЯ:


    ТИПЫ ОПЕРАТОРОВ:

        - Арифметические (arithmetic)

        - Присваивания (assignment)

        - Сравнения (relational)

        - Логические (logical)

    ВАРИАНТЫ ОБЪЯВЛЕНИЯ ПЕРЕМЕННЫХ:

        int x = 1, y = 2, z = 3;   - В строку только с переменными одного типа данных
        
        int x = 1;
        int y = 2;
        int z = 3;        


    АРИФМЕТИЧЕСКИЕ ОПЕРАТОРЫ:


        +       - сложение

        -       - вычитание 

        *       - умножение

        /       - деление

        %       - деление с остатком

        ++      - инкремент

        --      - декремент


        
        int a = 10;
        int b = 3;

        int c = a / b;    - значение "с" - отсекается дробная часть, потому что деление int на int = int


        double делить на double = double   - дробная часть сохраняется


        int integerPart =  a / b;       - целая часть числа от деления

        int modulo = a % b;             - остаток от деления

        double i = 5.5;
        double j = 3.5;

        double f = i % j;   - остаток от деления дробных чисел


        ++ и --    -  унарные операторы  - используют один операнд

        Преинкремент    ++a

        Постинкремент   a++


        int z  = x - y++;    -  "y" увеличится после выражения, в вычислении "z" не участвует

        int z = x - ++y;     -   увеличение "y" на 1 произойдет до вычисления "z"


        a += b               -   прибавь и присвой


        a = b = c = 17       -   оператор присвоения работает справа налево


        long a = 100L;
        int b = a;           -   здесь компилятор даст ошибку, потому что мы не можем присвоить переменной типа int переменнную long,
                                 потому что не весь диапазон значений long может уместиться в int



    ОПЕРАТОРЫ СРАВНЕНИЯ:


        >           - больше

        <           - больше или равно

        >=          - меньше 

        <=          - меньше или равно

         
